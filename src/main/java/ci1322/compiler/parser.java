
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ci1322.compiler;

import java.util.LinkedList;
import java_cup.runtime.Symbol;
import ci1322.compiler.TError;
import ci1322.compiler.structure.declaration.*;
import ci1322.compiler.structure.function.*;
import ci1322.compiler.structure.instructions.*;
import ci1322.compiler.structure.*;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
            "\000\037\000\002\017\006\000\002\002\004\000\002\016" +
                    "\004\000\002\016\003\000\002\003\014\000\002\003\012" +
                    "\000\002\007\003\000\002\007\003\000\002\006\014\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
                    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
                    "\003\000\002\010\003\000\002\010\003\000\002\005\006" +
                    "\000\002\005\006\000\002\014\005\000\002\014\003\000" +
                    "\002\011\010\000\002\012\005\000\002\013\006\000\002" +
                    "\004\011\000\002\004\006\000\002\004\010\000\002\004" +
                    "\005\000\002\002\004\000\002\015\005"});

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
            "\000\125\000\004\011\004\001\002\000\004\016\007\001" +
                    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
                    "\000\004\005\012\001\002\000\004\017\127\001\002\000" +
                    "\006\005\012\017\ufffe\001\002\000\006\007\014\025\013" +
                    "\001\002\000\004\014\120\001\002\000\004\025\015\001" +
                    "\002\000\004\014\016\001\002\000\004\026\017\001\002" +
                    "\000\004\015\020\001\002\000\004\016\021\001\002\000" +
                    "\006\007\025\020\024\001\002\000\004\017\116\001\002" +
                    "\000\014\004\043\006\037\010\050\025\052\027\047\001" +
                    "\002\000\004\025\034\001\002\000\004\023\026\001\002" +
                    "\000\004\026\027\001\002\000\004\024\030\001\002\000" +
                    "\004\025\031\001\002\000\004\021\032\001\002\000\020" +
                    "\004\uffe6\006\uffe6\007\025\010\uffe6\020\024\025\uffe6\027" +
                    "\uffe6\001\002\000\014\004\uffe8\006\uffe8\010\uffe8\025\uffe8" +
                    "\027\uffe8\001\002\000\004\021\035\001\002\000\020\004" +
                    "\uffe5\006\uffe5\007\025\010\uffe5\020\024\025\uffe5\027\uffe5" +
                    "\001\002\000\014\004\uffe7\006\uffe7\010\uffe7\025\uffe7\027" +
                    "\uffe7\001\002\000\004\025\111\001\002\000\016\004\043" +
                    "\006\037\010\050\017\ufff1\025\052\027\047\001\002\000" +
                    "\016\004\043\006\037\010\050\017\ufff3\025\052\027\047" +
                    "\001\002\000\016\004\043\006\037\010\050\017\ufff2\025" +
                    "\052\027\047\001\002\000\004\014\075\001\002\000\004" +
                    "\013\064\001\002\000\004\017\uffe4\001\002\000\016\004" +
                    "\043\006\037\010\050\017\ufff4\025\052\027\047\001\002" +
                    "\000\006\025\057\026\055\001\002\000\006\025\057\026" +
                    "\055\001\002\000\004\017\ufff0\001\002\000\006\012\053" +
                    "\013\uffec\001\002\000\004\025\052\001\002\000\004\013" +
                    "\uffed\001\002\000\010\015\ufffa\021\ufffa\022\ufffa\001\002" +
                    "\000\004\021\060\001\002\000\010\015\ufffb\021\ufffb\022" +
                    "\ufffb\001\002\000\004\017\uffe3\001\002\000\004\021\062" +
                    "\001\002\000\016\004\uffea\006\uffea\010\uffea\017\uffea\025" +
                    "\uffea\027\uffea\001\002\000\004\017\ufff8\001\002\000\006" +
                    "\025\067\026\065\001\002\000\004\021\074\001\002\000" +
                    "\004\021\073\001\002\000\004\014\070\001\002\000\004" +
                    "\026\071\001\002\000\004\015\072\001\002\000\004\021" +
                    "\uffe9\001\002\000\016\004\uffee\006\uffee\010\uffee\017\uffee" +
                    "\025\uffee\027\uffee\001\002\000\016\004\uffef\006\uffef\010" +
                    "\uffef\017\uffef\025\uffef\027\uffef\001\002\000\006\025\057" +
                    "\026\055\001\002\000\004\022\077\001\002\000\006\025" +
                    "\057\026\055\001\002\000\004\015\101\001\002\000\004" +
                    "\016\102\001\002\000\014\004\043\006\037\010\050\025" +
                    "\052\027\047\001\002\000\004\017\104\001\002\000\004" +
                    "\021\105\001\002\000\016\004\ufff9\006\ufff9\010\ufff9\017" +
                    "\ufff9\025\ufff9\027\ufff9\001\002\000\004\017\ufff6\001\002" +
                    "\000\004\017\ufff7\001\002\000\004\017\ufff5\001\002\000" +
                    "\004\023\112\001\002\000\004\025\113\001\002\000\004" +
                    "\024\114\001\002\000\004\021\115\001\002\000\016\004" +
                    "\uffeb\006\uffeb\010\uffeb\017\uffeb\025\uffeb\027\uffeb\001\002" +
                    "\000\004\021\117\001\002\000\006\005\ufffd\017\ufffd\001" +
                    "\002\000\004\015\121\001\002\000\004\016\122\001\002" +
                    "\000\006\007\025\020\024\001\002\000\004\017\124\001" +
                    "\002\000\004\021\125\001\002\000\006\005\ufffc\017\ufffc" +
                    "\001\002\000\004\017\uffff\001\002\000\004\002\001\001" +
                    "\002"});

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
            "\000\125\000\004\017\004\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\006\003\010\016\007" +
                    "\001\001\000\002\001\001\000\006\003\010\016\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\006\002\021\004\022\001\001\000\002" +
                    "\001\001\000\020\005\040\006\045\010\044\011\041\012" +
                    "\037\014\043\015\050\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\004\004\032\001\001\000\002" +
                    "\001\001\000\002\001\001\000\004\004\035\001\001\000" +
                    "\002\001\001\000\002\001\001\000\020\005\040\006\045" +
                    "\010\107\011\041\012\037\014\043\015\050\001\001\000" +
                    "\020\005\040\006\045\010\106\011\041\012\037\014\043" +
                    "\015\050\001\001\000\020\005\040\006\045\010\105\011" +
                    "\041\012\037\014\043\015\050\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\020\005\040\006" +
                    "\045\010\062\011\041\012\037\014\043\015\050\001\001" +
                    "\000\004\007\060\001\001\000\004\007\055\001\001\000" +
                    "\002\001\001\000\002\001\001\000\004\014\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\004\013\065\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\004\007\075\001\001\000\002" +
                    "\001\001\000\004\007\077\001\001\000\002\001\001\000" +
                    "\002\001\001\000\020\005\040\006\045\010\102\011\041" +
                    "\012\037\014\043\015\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\006\002\122\004\022\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001"});

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<TError> syntacticErrors = new LinkedList<TError>();

    public void syntaxError(Symbol s){
        String token = s.value.toString();
        int line = s.right;
        int col = s.left;

        System.out.println("-- Syntactic Error --");
        System.out.println("\tToken: "+token);
        System.out.println("\tLine: "+line);
        System.out.println("\tColumn: "+line);

        TError error = new TError(token,"Error","Unexpected token",line,col);
        syntacticErrors.add(error);
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // class_block ::= CLASS_BLOCK LEFTBRACKET main RIGHTBRACKET
            {
              Container RESULT =null;
                int mleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int mright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Container m = (Container) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = m;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("class_block", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= class_block EOF
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container start_val = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // main ::= function_vars main
            {
              Container RESULT =null;
                int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Function f = (Function) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int mleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int mright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Container m = (Container) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                m.addToFunctions(f);
                RESULT = m;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("main", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // main ::= function_vars
            {
                Container RESULT = null;
                int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Function f = (Function) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Container cont = new Container();
                cont.addToFunctions(f);
                RESULT = cont;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("main", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // function_vars ::= FUNCTION ARRAY N_VAR LEFTPAR NUM RIGHTPAR LEFTBRACKET block_func RIGHTBRACKET EOS
            {
              Function RESULT =null;
                int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;
                String n = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;
                int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                FunctionBlock b = (FunctionBlock) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                RESULT = new Function(TypesEnum.ARRAY, n, p, b.getDeclarations(), b.getInstructions());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_vars", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // function_vars ::= FUNCTION N_VAR LEFTPAR RIGHTPAR LEFTBRACKET block_func RIGHTBRACKET EOS
            {
              Function RESULT =null;
                int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;
                String n = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                FunctionBlock b = (FunctionBlock) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                RESULT = new Function(n, b.getDeclarations(), b.getInstructions());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("function_vars", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // item ::= N_VAR
            {
              Item RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Item<String>(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // item ::= NUM
            {
              Item RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Item<Integer>(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // for ::= FOR LEFTPAR item LESS_THAN item RIGHTPAR LEFTBRACKET instructions RIGHTBRACKET EOS
            {
              For RESULT =null;
                int minleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;
                int minright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;
                Item min = (Item) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;
                int maxleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int maxright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                Item max = (Item) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                List<Instruction> i = (List<Instruction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                RESULT = new For(min, max, i);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("for", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // instructions ::= for instructions
            {
              List<Instruction> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(f);
                                         RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // instructions ::= assign_Vars instructions
            {
              List<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(a);
                                                 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // instructions ::= read instructions
            {
              List<Instruction> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Read r = (Read)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(r);
                                         RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // instructions ::= print instructions
            {
              List<Instruction> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Print p = (Print)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(p);
                                            RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // instructions ::= for
            {
              List<Instruction> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>();
                           RESULT.add(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // instructions ::= assign_Vars
            {
              List<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>();
                                   RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // instructions ::= read
            {
              List<Instruction> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Read r = (Read)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>();
                          RESULT.add(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // instructions ::= print
            {
              List<Instruction> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Print p = (Print)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>();
                            RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // instructions ::= return
            {
                List<Instruction> RESULT = null;
                int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Return r = (Return) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new LinkedList<Instruction>();
                RESULT.add(r);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // assign_Vars ::= multiVars EQUALS NUM EOS
            {
              Assignment RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Assignment m = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DirectAssignment(i,m.getIdentifiers()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_Vars",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // assign_Vars ::= multiVars EQUALS call EOS
            {
              Assignment RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Assignment m = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                RESULT = new Call(c.getName(), c.getParam(), m.getIdentifiers());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_Vars",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // multiVars ::= N_VAR COMMA multiVars
            {
              Assignment RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment m = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 m.addToIdentifiers(n);
                                          RESULT = m;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiVars",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // multiVars ::= N_VAR
            {
              Assignment RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                Call call = new Call();
                call.addToIdentifiers(n);
                RESULT = call;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiVars",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // read ::= READ N_VAR LEFTSQ N_VAR RIGHTSQ EOS
            {
              Read RESULT =null;
                int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                String n = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                RESULT = new Read(n);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("read", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // print ::= PRINT item EOS
            {
              Print RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Item i = (Item)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // call ::= N_VAR LEFTPAR NUM RIGHTPAR
            {
              Call RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Call(n,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // decl_Vars ::= ARRAY LEFTSQ NUM RIGHTSQ N_VAR EOS decl_Vars
            {
              LinkedList<DeclVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<DeclVar> d = (LinkedList<DeclVar>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 DeclVar decl = new DeclVar(TypesEnum.ARRAY,n,s);
                                                                     d.add(decl);
                                                                     RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_Vars",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // decl_Vars ::= INT_TYPE N_VAR EOS decl_Vars
            {
              LinkedList<DeclVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<DeclVar> d = (LinkedList<DeclVar>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 DeclVar decl = new DeclVar(TypesEnum.INT,n);
                                                    d.add(decl);
                                                     RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_Vars",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // decl_Vars ::= ARRAY LEFTSQ NUM RIGHTSQ N_VAR EOS
            {
              LinkedList<DeclVar> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 DeclVar decl = new DeclVar(TypesEnum.ARRAY,n,s);
                                                    LinkedList<DeclVar> declVarLinkedList = new LinkedList<DeclVar>();
                                                    declVarLinkedList.add(decl);
                                                    RESULT = declVarLinkedList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_Vars",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // decl_Vars ::= INT_TYPE N_VAR EOS
            {
              LinkedList<DeclVar> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 DeclVar decl =new DeclVar(TypesEnum.INT,n);
                                       LinkedList<DeclVar> declVarLinkedList = new LinkedList<DeclVar>();
                                       declVarLinkedList.add(decl);
                                      RESULT = declVarLinkedList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_Vars",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // block_func ::= decl_Vars instructions
            {
              FunctionBlock RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<DeclVar> d = (LinkedList<DeclVar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionBlock(d,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_func",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // return ::= RETURN item EOS
            {
              Return RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Item i = (Item)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
